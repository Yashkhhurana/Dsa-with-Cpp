//1st Approach
    int lengthOfLongestSubstring(string s) {
   vector<bool> count(256,0);
   int first=0,second=0,len=0;
   while(second<s.size()){
   while(count[s[second]]){
    count[s[first]]=0;
    first++;
   } 
   count[s[second]]=1;
   len = max(len,second -first +1);
   second++;
   }
   return len;
    }



\\ Unordered Map Approach
int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> charIndex; // To store the last index of each character  
    int maxLength = 0; // To track the maximum length found  
    int start = 0; // To mark the start of the current substring  
    
    for (int i = 0; i < s.length(); i++) {  
        // If the character has been seen and is within the current substring  
        if (charIndex.find(s[i]) != charIndex.end() && charIndex[s[i]] >= start) {  
            // Move the start to the next position after the last occurrence  
            start = charIndex[s[i]] + 1;  
        }  
        // Update the last index of the character  
        charIndex[s[i]] = i;  
        // Calculate the length of the current substring  
        maxLength = max(maxLength, i - start + 1);  
    }  
    
    return maxLength;  
    }
